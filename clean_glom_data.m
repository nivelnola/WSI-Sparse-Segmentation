%% Analyze and clean glom data
%   Load the CSV of glomeruli summaries, and inspect them by size order
%
%   Alon S. Levin

%% Prepare the environment
% clear, clc, close all
format compact

%% Import data from AllGloms file
% Auto-generated by MATLAB

AllGloms_summary_file = 'F:\PAS_Dataset\AllGloms.csv';
fprintf('Importing summary table:\n\t%s\n', AllGloms_summary_file)

% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 8);

% Specify range and delimiter
opts.DataLines = [2, Inf];
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["FileID", "GlomID", "NumVertices", "mppX", "mppY", "AreaPixl", "AreaTrue", "Circularity"];
opts.VariableTypes = ["double", "double", "double", "double", "double", "double", "double", "double"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Import the data
Gloms_Table = readtable(AllGloms_summary_file, opts);

% Clear temporary variables
clear opts

fprintf('Complete!\n')
fprintf('===============================================\n')

%% Prepare inclusion matrix
fprintf('Preparing inclusion vector... ')
inclusion_mat = nan(size(Gloms_Table,1), 1);
fprintf('Complete!\n')
fprintf('===============================================\n')

%% Use first file as reference
%   By manual inspection, these gloms all look good
fprintf('Obtaining first slide statistics...\n')
Gloms_1.Data = Gloms_Table(Gloms_Table.FileID == 1, :);

Gloms_1.AreaTrue = struct(...
    'Mean', mean(Gloms_1.Data.AreaTrue), ...
    'STD',  std(Gloms_1.Data.AreaTrue));
fprintf('\tGlom Area:\n\t\tMean:\t%4.2f um^2\n\t\tSTD:\t%4.2f um^2\n', Gloms_1.AreaTrue.Mean, Gloms_1.AreaTrue.STD)

Gloms_1.Circularity = struct(...
    'Mean', mean(Gloms_1.Data.Circularity), ...
    'STD',  std(Gloms_1.Data.Circularity));
fprintf('\tCircularity:\n\t\tMean:\t%1.4f\n\t\tSTD:\t%1.4f\n', Gloms_1.Circularity.Mean, Gloms_1.Circularity.STD)
fprintf('===============================================\n')

%% Remove gloms by area
%   By observation, the small ones are errors, but most large ones are
%   kosher. 

% Remove gloms with area under 2 standard deviations
fprintf('Removing small gloms...\n')
num_STD = 2;
thresh = (Gloms_1.AreaTrue.Mean - num_STD*Gloms_1.AreaTrue.STD);
fprintf('\tThreshold:\t%4.2f um^2 (%i STD)\n', thresh, num_STD)
fprintf('\tBefore:\t\t%i gloms\n', size(Gloms_Table, 1));
Gloms_Table = Gloms_Table(Gloms_Table.AreaTrue >= thresh, :);
fprintf('\tAfter:\t\t%i gloms\n', size(Gloms_Table, 1));

fprintf('===============================================\n')

%% Remove gloms by circularity
%   Statistically, good gloms have high circularity. We'll allow for 1
%   standard deviations here 

% Remove gloms with circularity under 1 standard deviations
fprintf('Removing uncircular gloms...\n')
num_STD = 1;
thresh = (Gloms_1.Circularity.Mean - num_STD*Gloms_1.Circularity.STD);
fprintf('\tThreshold:\t%1.4f (%i STD)\n', thresh, num_STD)
fprintf('\tBefore:\t\t%i gloms\n', size(Gloms_Table, 1));
Gloms_Table = Gloms_Table(Gloms_Table.Circularity >= thresh, :);
fprintf('\tAfter:\t\t%i gloms\n', size(Gloms_Table, 1));

fprintf('===============================================\n')

%% Find minimum resolution 
max_mpp = max(unique(Gloms_Table.mppX));
Gloms_Table = removevars(Gloms_Table, {'mppX', 'mppY'});
Gloms_Table.Resolution = max_mpp * ones(size(Gloms_Table, 1), 1);
fprintf('Resolution for all images updated to:\t%f\n', max_mpp)
fprintf('===============================================\n')

%% Import glom database

AllGloms_file = 'F:\PAS_Dataset\AllGloms.mat';
fprintf('Importing database:\n\t%s\n', AllGloms_file)
if ~exist('Glom_files', 'var')
    load(AllGloms_file)
    fprintf('Complete!\n')
else
    fprintf('File already loaded!\n')
end
fprintf('===============================================\n')

%% Update and streamline database
fprintf('Updating database...\n')
Glom_files_clean = cell(size(Glom_files));
for file_ticker = 1:length(Glom_files)
    
    % Obtain current file
    currFile = Glom_files{file_ticker};
    fprintf('\tCurrent file:\t%i... ', file_ticker); 
    
    % Check resolution for resizing
    currFile.mpp = currFile.mppX;
    currFile = rmfield(currFile, {'mppX', 'mppY'});
    resize_flag = ((max_mpp - currFile.mpp) > 1e-6);       % Don't know why, but computer error
    if(resize_flag)
        fprintf('Resizing images... ');
    end
    
    for cell_ticker = length(currFile.Gloms):-1:1
        % If (FileID, CellID) does not exist in Gloms_Table, remove from
        % currFile
        if(~any(Gloms_Table.FileID == file_ticker & ...
                Gloms_Table.GlomID == cell_ticker))
           currFile.Gloms(cell_ticker) = [];
           continue
        end
        
        % Make a temporary Glom struct, remove unnecessary fields
        currGlom = currFile.Gloms{cell_ticker};
        
        % Resample images if necessary
        if(resize_flag)
            currGlom.Image = imresize(currGlom.Image_Full, max_mpp/currFile.mpp);
            currGlom.Mask = imresize(currGlom.Mask, max_mpp/currFile.mpp);
            currGlom.Vertices = round(currGlom.Vertices_norm * max_mpp/currFile.mpp);
        else
            currGlom.Image = currGlom.Image_Full;
            currGlom.Vertices = currGlom.Vertices_norm;
        end
        
        % Remove unnescessary fields
        currGlom = rmfield(currGlom, {'BoundingBox', 'Image_Full', 'Vertices_norm'});
        
        % Replace the glom struct
        currFile.Gloms{cell_ticker} = currGlom;
    end
    
    % Renumber entries in Gloms_Table
    Gloms_Table_curr = Gloms_Table(Gloms_Table.FileID == file_ticker, :);
    Gloms_Table_curr.GlomID(:) = (1:length(Gloms_Table_curr.GlomID))';
    Gloms_Table(Gloms_Table.FileID == file_ticker, :) = Gloms_Table_curr;
    
    % Save currFile to a new database
    currFile.mpp = max_mpp;
    Glom_files_clean{file_ticker} = currFile;
    fprintf('Complete!\n'); 
end
clear currFile

%% Manual checking - LAST STEP!
%   Iterate down the list
%   Process:
%       - Load image and mask
%       - Wait for input:
%           - R [Default]     ==> reject
%           - K               ==> keep
%           - Stop            ==> keep all following
cont_flag = input('Do you want to manually check the database? Y/N [N]: ', 's');
if ~isempty(cont_flag) && (cont_flag == 'Y' || cont_flag == 'y')
    % Choose how to sort the gloms
    sort_m = input('Choose the sorting method C/A/V: ', 's');
    sort_d = input('Choose the direction A/D: ', 's');
    switch sort_m
        case {'C', 'c'}
            switch sort_d
                case {'A', 'a'}
                    Gloms_Table = sortrows(Gloms_Table, 'Circularity', 'ascend');
                    fprintf('Table sorted by Circularity (Ascending)\n');
                case {'D', 'd'}
                    Gloms_Table = sortrows(Gloms_Table, 'Circularity', 'descend');
                    fprintf('Table sorted by Circularity (Descending)\n');
            end
        case {'A', 'a'}
            switch sort_d
                case {'A', 'a'}
                    Gloms_Table = sortrows(Gloms_Table, 'AreaTrue', 'ascend');
                    fprintf('Table sorted by AreaTrue (Ascending)\n');
                case {'D', 'd'}
                    Gloms_Table = sortrows(Gloms_Table, 'AreaTrue', 'descend');
                    fprintf('Table sorted by AreaTrue (Descending)\n');
            end
        case {'V', 'v'}
            switch sort_d
                case {'A', 'a'}
                    Gloms_Table = sortrows(Gloms_Table, 'NumVertices', 'ascend');
                    fprintf('Table sorted by NumVertices (Ascending)\n');
                case {'D', 'd'}
                    Gloms_Table = sortrows(Gloms_Table, 'NumVertices', 'descend');
                    fprintf('Table sorted by NumVertices (Descending)\n');
            end
    end
    fprintf('===============================================\n')

    for Glom_ticker = 1:size(Gloms_Table,1)

        % Obtain ID fields
        FileID = Gloms_Table.FileID(Glom_ticker);
        GlomID = Gloms_Table.GlomID(Glom_ticker);
        NumVertices = Gloms_Table.NumVertices(Glom_ticker);
        AreaTrue = Gloms_Table.AreaTrue(Glom_ticker);
        Circularity = Gloms_Table.Circularity(Glom_ticker);
        Resolution = Gloms_Table.Resolution(Glom_ticker);

        % Report key fields
        fprintf('INSPECTING Glom %i/%i:\n', Glom_ticker, size(Gloms_Table,1))
        fprintf('\tFileID:\t\t\t%i\n', FileID)
        fprintf('\tGlomID:\t\t\t%i\n', GlomID)
        fprintf('\tNumVertices:\t%i\n', NumVertices)
        fprintf('\tAreaTrue:\t\t%f\n', AreaTrue)
        fprintf('\tCircularity:\t%f\n', Circularity)
        fprintf('\tResolution:\t\t%f\n', Resolution)

        % Obtain glom
        curr_Glom_file = Glom_files_clean{FileID};
        test_Glom = curr_Glom_file.Gloms{GlomID};

        % Draw figure
        figure(1)
        
        subplot(1,2,1)
        image(test_Glom.Image)
        title(['File ', num2str(FileID), ', Glom ', num2str(GlomID)]);

        subplot(1,2,2)
        hold off
        image(test_Glom.Image .* uint8(test_Glom.Mask))
        hold on
        scatter(test_Glom.Vertices(:,1), test_Glom.Vertices(:,2), 'r*')
        title([num2str(AreaTrue), ' um^2, ', num2str(NumVertices), ' Vertices'])

        % Obtain user input
        flag_reject = input('Reject or Keep? R/K/Stop [R]: ', 's');
        switch flag_reject
            case {'', 'R', 'r'}
                inclusion_mat(Glom_ticker) = 0;
                fprintf('\t = REJECTED = \n')
                fprintf('-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n')
            case {'K', 'k'}
                inclusion_mat(Glom_ticker) = 1;
                fprintf('\t = ACCEPTED = \n')
                fprintf('-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n')
            case 'Stop'
                flag_stop = input('\nContinue? Y/N [Y]: ', 's');
                switch flag_stop
                    case {'N', 'n'}
                        inclusion_mat(Glom_ticker:end) = 1;
                        fprintf('\t = ACCEPT ALL FOLLOWING = \n')
                        break
                    case {'', 'Y', 'y'}
                        fprintf('-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n')
                        continue
                end
        end
    end
end

fprintf('===============================================\n')

%% Save output - cleaned dataset!
fprintf('Saving output... ');
Gloms_Table = sortrows(Gloms_Table, {'FileID', 'GlomID'}, 'ascend');
Gloms_Table = removevars(Gloms_Table, {'AreaPixl', 'Resolution'});
save('F:\PAS_Dataset\GoodGloms.mat', 'Glom_files_clean', 'Gloms_Table', '-v7.3')
fprintf('Complete!\nOutput saved to:\n\t%s\n', 'F:\PAS_Dataset\GoodGloms.mat')